## Git 및 GitHub 학습 노트

1. 버전 관리의 개요
1.1 버전관리 필요성
버전관리: 소스 코드 변경 사항을 추적하고 관리하는 것으로, 시간여행과 유사
파일 이름 변경 등으로 관리하는 것은 복잡하므로, 버전 관리 시스템 사용 필요
1.2 버전관리의 커밋
커밋(Commit): 저장소의 현 상태를 저장하는 행위. 변경 내용을 스냅샵으로 기록
파일집합의 변경 내용을 깃 저장소에 기록하는 작업. 시간순으로 저장
1.3 이력을 관리하는 저장소
저장소(Git repository): 파일이나 폴더를 저장하는 곳. 변경 이력으로 구분됨
원격 저장소: 여러 사용자가 함께 공유하는 저장소
지역 저장소: 개인 저장소로, 내 파일이 저장되는 곳

2. Git과 버전 관리 시스템 개요

2.1 Clone, Push, Pull
Clone: 서버의 원격 저장소를 지역 저장소로 복제. 프로젝트 시작 시 사용
Push: 지역 저장소 변경을 서버의 원격 저장소로 올림. 작업 완료 시 사용
Pull: 서버의 원격 저장소에서 변경사항을 가져옴. 다른 사용자 작업 내용을 받아올 때 사용
2.2 Commit과 버전 관리
Commit: 파일을 저장소에 저장. 작업한 내용을 기록하고 이력을 만듦
Add: 변경된 파일을 스테이징 영역에 추가. Add 후에 Commit으로 확정
2.3 Push와 Pull 활용
Push: 지역 저장소 변경 내용을 원격 저장소로 올림. 공개 작업물을 공유할 때 사용
Pull: 원격 저장소에서 지역 저장소로 변경 사항을 가져옴. 다른 사람의 작업물을 가져올 때 사용

3. 깃 설정과 저장소 생성 실습

3.1 깃 환경 설정
$ git config --global user.name yejin
$ git config --global user.email yejinseong26@gmail.com
$ git config --global core.autocrlf true
$ git config --global core.safecrlf false
$ git config --global core.editor 'code --wait'
$ git config --global init.defaultBranch main

3.2 저장소 생성
$ git init basic
$ cd basic
$ ls -al
위 명령어를 통해 사용자 설정과 "basic" 폴더의 Git 저장소 생성 확인

4. Pull Request 기초

4.1 Push와 Pull 기능
Push: 지역 저장소 변경 내용을 원격 저장소로 올림.
Pull: 원격 저장소에서 변경된 내용을 지역 저장소로 가져옴.
4.2 오픈소스 기여의 종류
다양한 활동으로 저장소에 기여. 기능 제안, 버그 수정, 문서화, 다양한 방법의 기여 가능.
4.3 Pull Request (PR)
Pull Request: 수정 권한이 없는 타인의 오픈소스에 저장소 수정 등의 기여를 요청. 수정 내용을 가져와 소유자의 저장소에 병합.
4.4 오픈소스 기여의 단계

기여자의 관점
새로운 브랜치 생성
변경사항 커밋
Pull Request 작성
논의 및 추가 커밋
관리자의 관점
↕
리뷰 요청
토론
PR 승인
병합

4.5 PR 시퀀스 다이어그램
PR 시퀀스 다이어그램
4.6 기여가 병합된 후
Upstream과 Remote의 커밋을 비교하여 동기화(Sync) 작업 수행.
4.7 Upstream에서의 이슈 확인
Upstream 저장소에서 이슈 생성 및 기여 진행.
4.8 Remote에서의 Fork Sync
Forked된 자신의 저장소를 Upstream과 동기화하여 최신 변경사항을 반영

자신의 로컬 환경에서 명령어를 사용하여 원격 저장소를 추가

$ git remote add upstream [Upstream 저장소 URL]
최신 변경사항을 반영하기 위해 Upstream에서 변경 내용을 가져오기

$ git fetch upstream
로컬 브랜치를 선택

$ git checkout [자신의 브랜치 이름]
가져온 변경 내용을 자신의 브랜치에 병합

$ git merge upstream/main
만약 충돌(conflict)이 발생하면 충돌을 해결하고 다시 커밋

최신 변경사항이 반영된 자신의 브랜치를 원격 저장소에 푸시

$ git push origin [자신의 브랜치 이름]
이렇게 함으로써 자신의 Forked된 저장소가 Upstream의 최신 변경사항을 반영

이 동기화 과정을 통해 오픈소스 소프트웨어에 대한 기여를 원할하게 수행가능


4. 비주얼 스튜디오 코드와 리눅스 명령
학습 내용: Visual Studio Code 및 리눅스 명령어 사용에 대한 소개
비주얼 스튜디오 코드 (Visual Studio Code) 개요:
비주얼 스튜디오 코드(Visual Studio Code)는 Microsoft사에서 개발한 오픈 소스 코드 에디터 소프트웨어로서, 간단히 VSCode로 알려져 있습니다. 이는 Electron 프레임워크를 사용하여 개발된 소프트웨어로서, 가벼우면서도 강력한 소스 코드 편집기로 평가됨
 주로 데스크톱에서 실행되며, Windows, macOS, 그리고 Linux에서 모두 사용 가능

VSCode는 기본적으로 JavaScript, TypeScript, Node.js를 지원,뿐만 아니라 다양한 언어와 런타임에 대한 풍부한 확장 기능을 제공하며, VSCode Marketplace에서 다양한 확장 프로그램을 설치하여 사용가능
 이는 사용자들이 아주 간단한 작업부터 복잡한 작업까지 다양한 환경에서 사용할 수 있도록 지원

VSCode의 중요한 기능 중 하나는 파일 편집과 버전 관리를 지원,이를 통해 사용자들은 손쉽게 코드를 작성하고 변경 이력을 관리가능

VSCode 설치:

다운로드 페이지에서 설치 파일을 다운로드 
시스템에 따라 유저 버전 또는 시스템 버전을 선택하여 설치
유저 버전(User Installer): 현재 사용자만 설치 가능하며 사용자 폴더에 설치
시스템 버전(System Installer): 해당 컴퓨터에 모든 사용자가 사용 가능하며 시스템 폴더에 설치
추가 작업 선택에서 필요한 옵션을 선택하여 설치를 완료
리눅스 명령어 준비:

폴더 관련 명령:
$ pwd   # 현재 폴더 표시
$ cd    # Change Directory
$ mkdir dname   # Make Directory
$ ls    # File or folder list

파일 관련 명령:
$ touch fname   # 빈 파일 fname 생성
$ cat fname     # 파일 내용 보이기
$ cp a b        # 파일 a를 b로 복사
$ mv f1 f2      # 파일 f1을 f2로 이름 수정
$ rm fname      # 파일 fname 삭제

명령어 ls의 다양한 옵션:
$ ls -l     # 파일의 상세정보
$ ls -a     # 숨김 파일 표시
$ ls -t     # 파일들을 생성 시간 순(최신 것부터)으로 표시

명령어 cat:
$ cat file1   # 파일의 내용을 화면에 출력
$ cat file1 file2   # 파일1과 파일2의 내용을 출력

Redirection 명령어 연산 > >> < :
$ echo aaa > a.txt   # (새) 파일 a.txt에 문자열 aaa 복사(replace)
$ echo bbb >> a.txt  # (새) 파일 a.txt에 문자열 bbb 추가
=> 리눅스 환경에서의 기본적인 파일 및 폴더 관리

5. 깃 커밋과 로그
학습 내용: Git 커밋과 로그 기능에 대한 이해
학습 목표:

깃 설정과 저장소 생성
init, add, commit, status
log, show
학습 내용:

초기에 깃을 설정하고 저장소를 생성
파일을 만들어 버전관리를 위한 과정을 수행
버전관리 로그 이력을 확인 ＆이전 버전으로 이동한 후  최신 버전으로 복구가능

학습 개요:
버전 이력을 표현: HEAD, HEAD~, HEAD~~, HEAD2, HEAD^, HEAD^1, HEAD^^, HEAD^
과거 이전 버전으로 이동: Checkout HEAD~

로그 이력과 과거 여행 실습 내용:
깃 설정과 지역 저장소 생성
파일 생성과 1st 커밋
2nd 커밋과 파일 수정
3rd 커밋과 로그 이력

로그의 옵션:
git log: 가장 최근의 커밋부터 표시
git log --graph: 문자 그림으로 로그 이력 그리기
git log --reverse: 오래된 커밋부터 표시 (graph와 함께 사용 불가)
git log --all: 모든 브랜치의 로그 이력 표시
git log -n: 최근 n개의 로그 이력 표시

과거로의 시간 여행:
git checkout HEAD~: HEAD를 이전 커밋으로 이동
git checkout -: 이전 checkout으로 이동
git checkout main: 브랜치의 마지막 커밋으로 이동

로그 이력과 과거 여행 실습 내용:
다양한 로그 출력 옵션을 사용하여 커밋 이력 확인
git checkout HEAD~를 사용하여 과거 커밋으로 이동
떨어진 HEAD(detached HEAD) 상태에서의 작업과 확인
다시 최신 버전으로 돌아오는 방법

명령어 정리:
git checkout [이전커밋]: 이전 커밋으로 이동
git switch -d [이전커밋]: 이전 커밋으로 이동
git checkout [branch]: 다른 브랜치로 이동
git switch [branch]: 다른 브랜치로 이동
git checkout -b [newBranch]: 새로운 브랜치를 생성하고 이동
git switch -c [newBranch]: 새로운 브랜치를 생성하고 이동

6. 로그 이력과 과거 여행
학습 내용: Git 로그 이력 조회와 과거 커밋으로의 여행

7. 커밋과 로그 이력, 과거 여행 실습
학습 내용: 커밋과 로그 이력 관리 및 과거 여행에 대한 실습

8. 파일 비교: diff
학습 내용: Git에서 파일 비교 도구인 diff의 활용

9. 파일 삭제와 복원: rm과 restore
학습 내용: Git에서 파일 삭제와 복원에 대한 학습
10. 버전과 태그 활용 실습
학습 내용: Git 버전 및 태그 활용에 대한 실습
11. 브랜치 개요와 관리
학습 내용: Git 브랜치의 기본 개념과 관리 방법 학습
12. 브랜치 개요와 관리 실습
학습 내용: 브랜치 개념 이해 및 브랜치 관리 실습
13. 원격 저장소 복제 Clone
학습 내용: Git 원격 저장소를 로컬로 복제하는 방법에 대한 학습
14. 지역과 원격 저장소 연동 push pull
학습 내용: 지역 저장소와 원격 저장소 간의 동기화 방법 학습
15. 지역과 원격 저장소 브랜치 연동 실습
학습 내용: 지역과 원격 저장소의 브랜치를 연동하는 실습
16. 오픈소스 소프트웨어
학습 내용: 오픈소스 소프트웨어에 대한 이해와 활용 방법
17. 임시저장 stash
학습 내용: Git에서 변경 사항을 일시적으로 저장하는 stash 기능 학습
18. 다양한 브랜치 병합
학습 내용: 다양한 상황에서의 Git 브랜치 병합
19. 병합 충돌과 해결
학습 내용: Git에서 발생하는 병합 충돌에 대한 이해와 해결 방법
20. 브랜치 리베이스 rebase
학습 내용: 브랜치 리베이스를 통한 Git 이력 정리 방법
21. 커밋 이력 수정
학습 내용: 이미 커밋한 이력을 수정하는 방법
23. 버전 되돌리기 reset
학습 내용: Git에서 커밋을 되돌리는 reset 기능에 대한 학습
24. 버전 되돌리기 reset 실습
학습 내용: reset을 활용한 커밋 되돌리기 실습
